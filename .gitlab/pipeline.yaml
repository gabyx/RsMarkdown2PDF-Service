stages:
  - lint
  - format
  - build
  - package

.default_dind_service: &default-dind-service
  - name: gabyxgabyx/rsmd2pdf-service:ci-docker-dind-1.0.0
    alias: docker

.defaults-rules: &defaults-rules
  - if: "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^feature|bugfix/ ||
      $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    when: always

.main-rules: &main-rules
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    when: always

# upload-ci-images:
#   stage: package
#   needs: []
#   image: gabyxgabyx/rsmd2pdf-service:ci-docker-1.0.0
#   rules:
#     - *main-rules
#   services: *default-dind-service
#   script:
#     - apk add git bash just findutils parallel
#     - just upload-ci-images
#
# format:
#   stage: format
#   needs: []
#   image: gabyxgabyx/rsmd2pdf-service:ci-format-1.0.0
#   rules:
#     - *defaults-rules
#   services: *default-dind-service
#   variables:
#     # When you use the dind service, you must instruct Docker to talk with
#     # the daemon started inside of the service 'docker:*-dind'.
#     # The daemon is available with a network connection instead of the default
#     # /var/run/docker.sock socket.
#     # Docker does this automatically by setting the DOCKER_HOST in
#     # https://github.com/docker-library/docker/blob/master/docker-entrypoint.sh#L30
#     # The 'docker' hostname is the alias of the service container as described
#     # at https://docs.gitlab.com/ee/ci/services/#accessing-the-services.
#     # which is `docker` and then DOCKER_HOST=tcp://docker:2376
#     #
#     # We need to install Githooks into the build directory which allows
#     # Githooks to mount it to its docker runs, apparently.
#     GITHOOKS_INSTALL_PREFIX: "$CI_BUILDS_DIR/githooks"
#   script:
#     - just format
#
# lint:
#   stage: lint
#   needs: []
#   image: gabyxgabyx/rsmd2pdf-service:ci-lint-1.0.0
#   services: *default-dind-service
#   rules:
#     - *defaults-rules
#   variables:
#     GITHOOKS_INSTALL_PREFIX: "$CI_BUILDS_DIR/githooks"
#   script:
#     - nix develop .#ci --command just --set parallel true lint
#
# lint-docs:
#   stage: lint
#   needs: []
#   image: gabyxgabyx/rsmd2pdf-service:ci-lint-docs-1.0.0
#   services: *default-dind-service
#   rules:
#     - *defaults-rules
#   script:
#     - just --set parallel true lint-docs
#   allow_failure: true
#
# build:
#   stage: build
#   needs: []
#   image: gabyxgabyx/rsmd2pdf-service:ci-build-1.0.0
#   rules:
#     - *defaults-rules
#   script:
#     - nix develop .#ci --command just --set parallel true build
#
# docker-run:
#   stage: package
#   needs: []
#   image: docker:24
#   rules:
#     - *defaults-rules
#   script:
#     - docker info
#     - docker run alpine:latest cat /etc/os-release
#
# docker-remote-info:
#   stage: package
#   needs: []
#   image: docker:24
#   rules:
#     - *defaults-rules
#   variables:
#     DOCKER_HOST: unix:///var/run/docker.sock
#   script:
#     - docker info
#
# docker-remote-run&build:
#   stage: package
#   needs: []
#   image: docker:24
#   rules:
#     - *defaults-rules
#   variables:
#     DOCKER_HOST: unix:///var/run/docker.sock
#   script:
#     - docker info
#     - docker run alpine:latest cat /etc/os-release
#
# podman-remote-run:
#   stage: package
#   needs: []
#   image: quay.io/podman/stable:latest
#   rules:
#     - *defaults-rules
#   variables:
#     CONTAINER_HOST: unix:///var/run/docker.sock
#   script:
#     - podman info
#     - podman run alpine:latest cat /etc/os-release
#
podman-remote-run&build:
  stage: package
  needs: []
  image: quay.io/podman/stable:latest
  rules:
    - *defaults-rules
  variables:
    CONTAINER_HOST: unix://var/run/docker.sock
  script:
    - podman info
    - podman run alpine:latest cat /etc/os-release
    - cd tests && podman build -t test:test -f Dockerfile2 .

podman-remote-alpine-run&build:
  stage: package
  needs: []
  image: alpine:latest
  rules:
    - *defaults-rules
  variables:
    CONTAINER_HOST: unix://var/run/docker.sock
  script:
    - apk add podman containers-common wget
    - cat /etc/containers/seccomp.json || true
    - mkdir -p /etc/containers &&
      wget -O /etc/containers/seccomp.json
      https://src.fedoraproject.org/rpms/containers-common/raw/rawhide/f/seccomp.json
    - podman info
    - podman run alpine:latest cat /etc/os-release
    - cd tests && podman build --security-opt seccomp=unconfined --no-cache -t test:test -f Dockerfile .

podman-remote-alpine-run&build2:
  stage: package
  needs: []
  image: alpine:latest
  rules:
    - *defaults-rules
  variables:
    CONTAINER_HOST: unix://var/run/docker.sock
  script:
    - apk add podman containers-common
    - podman info
    - podman run alpine:latest cat /etc/os-release
    # - mkdir -p /etc/containers &&
    #   wget -O /etc/containers/seccomp.json
    #   https://src.fedoraproject.org/rpms/containers-common/raw/rawhide/f/seccomp.json
    - cd tests && podman build --no-cache -t test:test -f Dockerfile2 .

podman-remote-alpine-run&build&format:
  stage: format
  needs: []
  image: alpine:latest
  rules:
    - *defaults-rules
  variables:
    CONTAINER_HOST: unix://var/run/docker.sock
    GITHOOKS_INSTALL_PREFIX: "$CI_BUILDS_DIR/githooks"
  script:
    - apk add podman git
    - . ./tools/general.sh && ci_setup_nix
    - ln -s /usr/bin/podman /usr/bin/docker
    - docker info
    - docker run alpine:latest cat /etc/os-release
    - apk add jq curl bash just findutils parallel
    # - . ./tools/general.sh && ci_setup_githooks "$GITHOOKS_INSTALL_PREFIX"
    - just format
#
# podman-remote-alpine-run&build&lint:
#   stage: lint
#   needs: []
#   image: alpine:latest
#   rules:
#     - *defaults-rules
#   variables:
#     CONTAINER_HOST: unix://var/run/docker.sock
#     GITHOOKS_INSTALL_PREFIX: "$CI_BUILDS_DIR/githooks"
#   script:
#     - apk add podman git
#     - . ./tools/general.sh && ci_setup_nix
#     - ln -s /usr/bin/podman /usr/bin/docker
#     - docker info
#     - docker run alpine:latest cat /etc/os-release
#     - nix develop .#ci --command just --set parallel true lint
