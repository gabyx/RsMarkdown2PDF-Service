root_dir = str(local(["git", "rev-parse", "--show-toplevel"])).strip()


def get_component_path(name=None, *args):
    if name:
        return os.path.join(root_dir, "components", name, *args)
    else:
        return os.path.join(root_dir, "components")


component_dirs = (
    str(
        local(
            [
                "find",
                get_component_path(),
                "-mindepth",
                "1",
                "-maxdepth",
                "1",
                "-type",
                "d",
            ]
        )
    )
    .strip()
    .split()
)


def get_manifest_path(name, *args):
    return os.path.join(root_dir, "manifests", name, *args)


def get_component_config(tiltfile=None, name=None):
    if tiltfile != None:
        if not os.path.exists(tiltfile):
            fail("Tiltfile:", tiltfile, "does not exist.")
        name = os.path.basename(os.path.dirname(tiltfile))

    elif not name:
        fail("Name not given")

    comp_dir = get_component_path()
    dir = get_component_path(name)
    manifest_dir = get_manifest_path(name)
    dockerfile = get_component_path(name, "docker", "Dockerfile")

    return {
        "comp-dir": comp_dir,
        "name": name,
        "dir": dir,
        "manifest-dir": manifest_dir,
        "dockerfile": dockerfile if os.path.exists(dockerfile) else None,
    }


def load_settings():
    env_file = os.path.join(config.main_dir, ".env.yaml")
    return read_yaml(
        env_file,
        default={
            "use-local-registry": False,
            "build-type": "release",
            "enable-backtrace": "0",
        },
    )
